name: 🔍 Debug Google to Notion Sync (Selenium)

on:
  workflow_dispatch:
    inputs:
      test_offset:
        description: "시작 오프셋"
        required: false
        default: "0"
      test_limit:
        description: "처리 개수"
        required: false
        default: "2" # Selenium 테스트를 위해 2개로 제한
  repository_dispatch:
    types: [run-sync]

jobs:
  debug-and-sync:
    runs-on: ubuntu-latest

    steps:
      - name: 🔍 Step 1 - Checkout
        uses: actions/checkout@v4

      - name: 🔍 Step 2 - SECRET 완전 디버깅
        run: |
          echo "🔍🔍🔍 SECRETS 디버깅 시작 🔍🔍🔍"
          echo "현재 시간: $(date)"
          echo "워크플로우: debug-sync.yml"
          echo ""

          echo "=== Google JSON Secret 상태 ==="
          if [ -z "$GOOGLE_APPLICATION_CREDENTIALS_JSON" ]; then
            echo "❌❌❌ GOOGLE_APPLICATION_CREDENTIALS_JSON이 완전히 비어있습니다!"
            exit 1
          fi

          echo "✅ Secret이 존재합니다"
          echo "길이: ${#GOOGLE_APPLICATION_CREDENTIALS_JSON} 문자"

          if [ ${#GOOGLE_APPLICATION_CREDENTIALS_JSON} -lt 500 ]; then
            echo "❌❌❌ JSON이 너무 짧습니다!"
            exit 1
          fi

          echo "=== 다른 Secrets 상태 ==="
          echo "SPREADSHEET_ID: ${SPREADSHEET_ID:-'❌ 없음'}"
          echo "NOTION_TOKEN 길이: ${#NOTION_TOKEN}"
          echo "AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-'❌ 없음'}"

          echo "🔍🔍🔍 SECRET 디버깅 완료 🔍🔍🔍"
        env:
          GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
          SPREADSHEET_ID: ${{ secrets.SPREADSHEET_ID }}
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}

      - name: 🔍 Step 3 - Python 설정
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: 🔍 Step 4 - 패키지 설치
        run: |
          echo "🔍 Python 패키지 설치 중..."
          pip install -r requirements.txt
          echo "✅ 패키지 설치 완료"

      - name: 🔍 Step 5 - Chrome 및 Selenium 환경 설정
        run: |
          echo "🔍🔍🔍 Chrome 및 Selenium 환경 설정 시작 🔍🔍🔍"

          # Chrome 설치
          echo "Chrome 설치 중..."
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

          # Chrome 버전 확인
          echo "Chrome 버전 확인:"
          google-chrome --version

          # Xvfb 설치 (가상 디스플레이)
          echo "Xvfb 설치 중..."
          sudo apt-get install -y xvfb

          # 디스플레이 서버 시작
          echo "가상 디스플레이 시작..."
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          sleep 3

          # 디스플레이 확인
          echo "디스플레이 확인: $DISPLAY"

          # ChromeDriver 확인
          echo "ChromeDriver 확인..."
          python -c "
          import chromedriver_autoinstaller
          driver_path = chromedriver_autoinstaller.install()
          print(f'ChromeDriver 경로: {driver_path}')
          "

          echo "🔍🔍🔍 Chrome 및 Selenium 환경 설정 완료 🔍🔍🔍"

      - name: 🔍 Step 6 - Selenium 연결 테스트
        run: |
          echo "🔍🔍🔍 Selenium 연결 테스트 시작 🔍🔍🔍"

          export DISPLAY=:99

          python << 'EOF'
          import os
          from selenium import webdriver
          from selenium.webdriver.chrome.options import Options
          from selenium.webdriver.chrome.service import Service
          import chromedriver_autoinstaller

          print("=== Selenium 테스트 시작 ===")

          try:
              # ChromeDriver 설치
              driver_path = chromedriver_autoinstaller.install()
              print(f"ChromeDriver 경로: {driver_path}")

              # Chrome 옵션 설정
              opts = Options()
              opts.binary_location = "/usr/bin/google-chrome"
              
              # GitHub Actions 환경용 옵션
              opts.add_argument("--headless")
              opts.add_argument("--no-sandbox")
              opts.add_argument("--disable-dev-shm-usage")
              opts.add_argument("--disable-gpu")
              opts.add_argument("--remote-debugging-port=9222")
              opts.add_argument("--window-size=1920,1080")
              
              print("Chrome 옵션 설정 완료")

              # 웹드라이버 생성
              service = Service(driver_path)
              driver = webdriver.Chrome(service=service, options=opts)
              print("✅ 웹드라이버 생성 성공!")

              # 테스트 페이지 접속
              print("Google 홈페이지 접속 테스트...")
              driver.get("https://www.google.com")
              print(f"페이지 제목: {driver.title}")
              
              if "Google" in driver.title:
                  print("✅ Google 페이지 접속 성공!")
              else:
                  print("❌ Google 페이지 접속 실패")

              # Smore 사이트 접속 테스트
              print("Smore 사이트 접속 테스트...")
              driver.get("https://smore.im")
              print(f"페이지 제목: {driver.title}")
              print(f"현재 URL: {driver.current_url}")
              
              if "smore" in driver.current_url.lower():
                  print("✅ Smore 사이트 접속 성공!")
              else:
                  print("❌ Smore 사이트 접속 실패")

              driver.quit()
              print("✅ Selenium 테스트 완료!")

          except Exception as e:
              print(f"❌ Selenium 오류: {e}")
              import traceback
              print(f"상세 오류:\n{traceback.format_exc()}")
              raise

          EOF

          echo "🔍🔍🔍 Selenium 연결 테스트 완료 🔍🔍🔍"

      - name: 🔍 Step 7 - Google 인증 파일 생성
        run: |
          echo "🔍🔍🔍 Google 인증 파일 생성 시작 🔍🔍🔍"

          cat > /tmp/google_credentials.json << 'EOF'
          ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
          EOF

          echo "파일 생성 완료"
          file_size=$(wc -c < /tmp/google_credentials.json)
          echo "파일 크기: ${file_size} bytes"

          if [ $file_size -lt 100 ]; then
            echo "❌❌❌ 파일이 너무 작습니다!"
            exit 1
          fi

          # JSON 유효성 검사
          if python -c "import json; json.load(open('/tmp/google_credentials.json'))" 2>/dev/null; then
            echo "✅✅✅ 유효한 JSON 파일입니다!"
          else
            echo "❌❌❌ 유효하지 않은 JSON입니다!"
            exit 1
          fi

          echo "🔍🔍🔍 Google 인증 파일 준비 완료 🔍🔍🔍"

      - name: 🚀 Step 8 - Python 스크립트 실행 (Selenium 디버깅)
        env:
          CHROME_BINARY: /usr/bin/google-chrome
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/google_credentials.json
          SPREADSHEET_ID: ${{ secrets.SPREADSHEET_ID }}
          SHEET_RANGE: ${{ secrets.SHEET_RANGE }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SMORE_USER_DATA: ""
          SMORE_PROFILE: ""
          TEST_OFFSET: ${{ github.event.inputs.test_offset || github.event.client_payload.test_offset || '0' }}
          TEST_LIMIT: ${{ github.event.inputs.test_limit || github.event.client_payload.test_limit || '2' }}
          PYTHONUNBUFFERED: 1
        run: |
          echo "🚀🚀🚀 스크립트 실행 시작 🚀🚀🚀"
          echo "TEST_OFFSET: $TEST_OFFSET"
          echo "TEST_LIMIT: $TEST_LIMIT"
          echo "Google 인증 파일: $GOOGLE_APPLICATION_CREDENTIALS"

          # 가상 디스플레이 설정 (다시 확인)
          export DISPLAY=:99

          # Xvfb가 실행 중인지 확인
          if pgrep Xvfb > /dev/null; then
              echo "✅ Xvfb가 실행 중입니다"
          else
              echo "⚠️ Xvfb 재시작..."
              Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
              sleep 3
          fi

          echo "🔍 Python 스크립트 실행..."
          python -u google-to-notion.py

          echo "✅✅✅ 스크립트 실행 완료 ✅✅✅"
